
AVRASM ver. 2.1.52  C:\Users\Sander\Desktop\wekker\wekker\STK500\Project\Project.asm Thu Apr 18 14:55:17 2013

[builtin](2): Including file 'C:\Program Files\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m32def.inc'
C:\Users\Sander\Desktop\wekker\wekker\STK500\Project\Project.asm(5): Including file 'C:\Program Files\Atmel\Atmel Studio 6.0\extensions\Atmel\AVRAssembler\2.1.51.64\AvrAssembler/Include\m32def.inc'
C:\Users\Sander\Desktop\wekker\wekker\STK500\Project\Project.asm(28): warning: Register r26 already defined by the .DEF directive
C:\Users\Sander\Desktop\wekker\wekker\STK500\Project\Project.asm(29): warning: Register r27 already defined by the .DEF directive
C:\Users\Sander\Desktop\wekker\wekker\STK500\Project\Project.asm(30): warning: Register r28 already defined by the .DEF directive
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 #define _M32DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega32
                 #pragma AVRPART ADMIN PART_NAME ATmega32
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x02
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Clear Timer/Counter2 on Compare Match
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Pulse Width Modulator Enable
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SM2	= 6	; Sleep Mode Select
                 .equ	SE	= 7	; Sleep Enable
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1&0
                 .equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCR - Store Program Memory Control Register
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write secion read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler bits
                 .equ	TWPS1	= 1	; TWI Prescaler bits
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x085f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                 .equ	OC2addr	= 0x0008	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x000a	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                 .equ	OC0addr	= 0x0014	; Timer/Counter0 Compare Match
                 .equ	OVF0addr	= 0x0016	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0018	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x001a	; USART, Rx Complete
                 .equ	UDREaddr	= 0x001c	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001e	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x0020	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x0022	; EEPROM Ready
                 .equ	ACIaddr	= 0x0024	; Analog Comparator
                 .equ	TWIaddr	= 0x0026	; 2-wire Serial Interface
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M32DEF_INC_ */
                 
                 
                  Author: Sander van Kasteel, Wouter Houtsma en Vasco de Krijger
                  Version: v1.0
                 */
                  .include "m32def.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega32.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m32def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega32
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega32
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M32DEF_INC_
                 
                 #endif  /* _M32DEF_INC_ */
                 
                  .org 0x0000
000000 c00e       rjmp init
                 
                  .org OC1Aaddr					
00000e c02b       rjmp timer
                 
                  .equ alarmSign = 0
                  .equ alarmBit = 3
                 
                  ; lets give those poor & sad anonymous registers a name shall we ? 
                  .def	temp	= r16
                 
                  .def	timerS = r17
                  .def	timerM = r18
                  .def	timerH	= r19
                  .def	alarm_s	= r20
                  .def	alarm_m = r21	
                  .def	alarm_h = r22
                 
                  .def	saveSR  = r23
                  .def   settings= r24
                  .def	mode	= r25
                  .def	temp2	= r26
                  .def	curLed	= r27
                  .def	counter = r28
                 
                 init:
00000f e008      	ldi  temp,high(RAMEND)				; Initialize the stack pointer
000010 bf0e      	out  SPH,temp             
000011 e50f      	ldi  temp,low(RAMEND)       
000012 bf0d      	out  SPL,temp 
                 	
000013 e090      	ldi mode, 0
000014 e0c0      	ldi counter, 0
000015 2700      	clr temp							; clear tmp
000016 bd00      	out UBRRH, temp						; Sets the value in temp to the UBRRH port
000017 e203      	ldi temp, 35						; The 35 equals the 19200 Baud (See page 167 of the datasheet)
000018 b909      	out UBRRL, temp
                 	
000019 e806      	ldi temp, (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0) ; set frame format : asynchronous, parity disabled, 8 data bits, 1 stop bit
00001a bd00      	out UCSRC, temp
                 	
                 	
00001b e108      	ldi temp, (1 << RXEN) | (1 << TXEN) ; enable receiver & transmit on the RS232 port
00001c b90a      	out UCSRB, temp
                 	
                 	;init port
00001d ef0f      	ser temp							; sets temp to 0xFF
00001e bb07      	out DDRB, temp						; Port B is output port
00001f bb08      	out PORTB, temp						; Turn the leds off
000020 2700      	clr temp							; clear temp
000021 bb01      	out DDRD, temp						; outputs the value of temp to DDRB
000022 bb0a      	out DDRA, temp						; outputs the value of temp to DDRA
                 	
                 	;init timer
000023 e201      	ldi temp, high(8640)				; sets the prescale to 8640 which is 1/4 of 1 second (43200 is 1 sec with a prescaler of 256)
000024 bd0b      	out OCR1AH, temp					
000025 ec00      	ldi temp, low(8640)
000026 bd0a      	out OCR1AL, temp
                 	
                 
000027 e00c      	ldi temp, (1 << CS12) | (1 << WGM12); put the timer into ctc mode and apply a prescaler of 256
000028 bd0e      	out TCCR1B, temp
                 	
000029 e100      	ldi temp, (1 << OCIE1A)				; enable interrupt 1
00002a bf09      	out TIMSK, temp						; set the value of temp to the outport
00002b 2700      	clr temp							; clear temp
                 
00002c e087      	ldi settings, 0b00000111			; loads the value of 0b00000110 in the settings register
                 	;ldi settings, 0b01110110
                 								
00002d e020      	ldi timerM, 0					; put in some default values for timerM
00002e e030      	ldi timerH, 0					; put in some default values for timerH
00002f e010      	ldi timerS, 0					; put in some default values for timerS
000030 e040      	ldi alarm_s, 0						; put in some default values for alarmS
000031 e050      	ldi alarm_m, 0					; put in some default values for alarmM
000032 e060      	ldi alarm_h, 0					; put in some default values for alarmH
                 		
000033 9478      	sei									; enable interrupts
                 
                 loop:							
000034 cfff      	rjmp loop
                 
                 setLeds:
000035 bbb8      	out PORTB, curLed					; sets the value of curLed to PORTB
000036 9508      ret
                 
                 telop:
000037 d096      	rcall increment_second				; call increment_second
000038 e0c0      	ldi counter, 0						; loads an 0 in counter
000039 c009      	rjmp returnToTimer					; jumps to returnToTime
                 
                 timer:							
00003a b77f      	in saveSR, SREG						; save StatusRegister to saveSR 
00003b d07a      	rcall checkAlarm					; calls checkAlarm
00003c d01f      	rcall updateTime					; call de updateTime checks
00003d d0ba      	rcall sendTime						; call sendTime
00003e 3090      	cpi mode, 0 
00003f f029      	breq setAlarm
                 	continueTimerAfterAlarm:
                 
000040 95c3      	inc counter							; increments counter
000041 30c5      	cpi counter, 5						; compares counter to 5
000042 f3a1      	breq telop							; branches to telop if its equal to 5
                 
                 	returnToTimer:
000043 bf7f      	out SREG, saveSR					; puts the StatusRegister back from saveSR
000044 9518      reti
                 
                 setAlarm:
000045 d001      	rcall alarmSet
000046 cff9      	rjmp continueTimerAfterAlarm
                 alarmSet:
000047 b309      	in temp, PINA						; read input from portA
000048 3f0e      	cpi temp, 0b11111110				; compare
000049 f459      	brne endAlarmSet
                 
00004a 3091      	cpi mode, 1
00004b f049      	breq endAlarmSet
                 
00004c ff80      		sbrs settings, 0
00004d c003      		rjmp alarmOn
00004e fd80      		sbrc settings, 0
00004f c003      		rjmp alarmOff
000050 9508      	ret
                 		alarmOn:
000051 6081      			sbr settings, (1<<alarmSign)
000052 9508      		ret
                 
                 	alarmOff:
000053 7f8e      		cbr	settings, (1<<alarmSign)
000054 7f87      		cbr settings, (1<<alarmBit)
                 	endAlarmSet:
000055 9508      ret
                 
                 updateMode:
000056 9593      	inc mode							; increment the mode register
000057 e006      	ldi temp, 6							; load 6 into the temp register
000058 1309      	cpse temp, mode						; compare temp and mode
000059 c007      	rjmp endUpdate						; if true, jump to endUpdate
00005a e090      	ldi mode, 0							; load 0 into the mode register
00005b c005      	rjmp endUpdate						; rjmp to endUpdate
                 
                 updateTime:
00005c b309      	in temp, PINA						; read the input of PINA and load that value in temp
00005d 3f0d      	cpi temp, 0b11111101				; compare temp with 0b11111101
00005e f3b9      	breq updateMode						; if equals then branch to updateMode
                 	
00005f 3f0e      	cpi temp, 0b11111110				; compare temp with 0b11111110
000060 f1b1      	breq tussenstap						; branch to tussenStap
                 
                 	endUpdate:
000061 efbf      	ldi curLed, 0b11111111				; load 0b11111111 into the curLed register
000062 dfd2      	rcall setLeds						; rcall setLeds
                 	
000063 3090      	cpi mode, 0							; compare mode to 0
000064 f0c1      	breq returnFromUpdate				; if equals then branch to returnFromUpdate
000065 e5bf      	ldi curLed, 0b01011111				; load 0b01011111 into curLed register
000066 dfce      	rcall setLeds						; calls setLeds
                 	
000067 3091      	cpi mode, 1							; compare mode register to 1
000068 f0a1      	breq returnFromUpdate				; branch if equals to returnFromUpdate
000069 e6bf      	ldi curLed, 0b01101111				; load 0b01101111 into curLed
00006a dfca      	rcall setLeds						; calls setLeds
                 	
00006b 3092      	cpi mode, 2							; compares mode register to 2
00006c f081      	breq returnFromUpdate				; if this is true then branch to returnFromUpdate
00006d e7b7      	ldi curLed, 0b01110111				; loads 0b01110111 into curLed
00006e dfc6      	rcall setLeds						; calls setLeds
                 	
00006f 3093      	cpi mode, 3							; compare mode register to 3
000070 f061      	breq returnFromUpdate				; if this is true then brancht to returnFromUpdate
000071 e1bf      	ldi curLed, 0b00011111				; load 0b00011111 into curLed
000072 dfc2      	rcall setLeds						; calls setLeds
                 	
000073 3094      	cpi mode, 4							; compare mode register to 4
000074 f041      	breq returnFromUpdate				; if this is equal then branch to returnFromUpdate
000075 e2bf      	ldi curLed, 0b00101111				; loads 0b00101111 into the curLeds register
000076 dfbe      	rcall setLeds						; calls setLeds
                 	
000077 3095      	cpi mode, 5							; compares mode register to 5
000078 f021      	breq returnFromUpdate				; if this is equal then branch to returnFromUpdate
000079 e3b7      	ldi curLed, 0b00110111				; loads 0b00110111 into the curLeds register
00007a dfba      	rcall setLeds						; calls setLeds
                 	
00007b 3096      	cpi mode, 6							; compares mode register to 6
00007c f001      	breq returnFromUpdate				; always branch to returnFromUpdate
                 
                 	returnFromUpdate:
00007d 9508      ret
                 	
                 increment_alarm_second:
00007e 9543      	inc alarm_s							; increment timerS
00007f 354a      	cpi alarm_s	, 0x5A					; Compare timerS to 60
000080 f049      	breq increment_alarm_minute			; If true, jump incMinute
000081 9542      	swap alarm_s						; swap here to save registers
000082 3a40      	cpi alarm_s	, 0xA0					; compares alarm_s register to an inverted 10
000083 f020      	brlo endIncSecal					; branch if lower then an inverted 10 to endIncSecal
                 
                 		incSecTenal:			
000084 704f      			andi alarm_s, 0x0F			; does an AND + increment on the alarm_s register
000085 9543      			inc alarm_s					; increments the alarm_s register
000086 9542      			swap alarm_s				; swaps alarm_s register
000087 9508      		ret								; returns from the calll
                 
                 	endIncSecal:						
000088 9542      	swap alarm_s						; swap back
000089 9508      	ret
                 increment_alarm_minute:
00008a 2744      	clr alarm_s							; first off all, lets clear the alarm_s register
00008b 9553      	inc alarm_m							; increment the alarm_m register
00008c 355a      	cpi alarm_m, 0x5A					; then compare it to 60
00008d f059      	breq increment_alarm_hour			; branches if equal to increment_alarm_hour
00008e 9552      	swap alarm_m						; swap alarm_m
                 						
00008f 3a50      	cpi alarm_m, 0xA0					; compare alarm_m to 10
000090 f020      	brlo endIncMinal					; if lower then 10 then branch to endIncMinal
                 		
                 		incMinTenal:		
000091 705f      			andi alarm_m, 0x0F			; does logical AND and loads 0x0F on the alarm_m register
000092 9553      			inc alarm_m					; increments alarm_m
000093 9552      			swap alarm_m				; swap back :)
000094 9508      		ret								; now return back to the call place
                 
                 		endIncMinal:
000095 9552      		swap alarm_m					; swaps back if nothing is needed
000096 9508      ret
                 
                 tussenstap:								; this implemented because of the limit of rcall
000097 d027      	rcall incrementTime					; rcall incrementTime
000098 cfc8      	rjmp endUpdate						; jumps to endUpdate 
                 
                 increment_alarm_hour:
000099 2755      	clr alarm_m							; clear the alarm_m register
                 						
00009a 9563      	inc alarm_h							; increment alarm_h register
00009b 3264      	cpi alarm_h, 0x24					; compare to 24
00009c f039      	breq reset_clockal					; if alarm_h equals 24 then branch to reset_clockal
00009d 9562      	swap alarm_h						; swap alarm_h
                 								
00009e 3a60      	cpi alarm_h, 0xA0					; compare alarm_h to 10
00009f f040      	brlo endIncHoural					; if alarm_h is lower then 10 branch to endIncHoural
                 
                 		incHourTenal:
0000a0 706f      			andi alarm_h, 0x0F			; logical AND with Immediate on alarm_h
0000a1 9563      			inc alarm_h					; incremetns alarm_h register
0000a2 9562      			swap alarm_h				; swaps the alarm_h bac
0000a3 9508      		ret
                 										
                 		reset_clockal:
0000a4 2711      			clr timerS					; clears timerS register
0000a5 2755      			clr alarm_m					; clears alarm_m register
0000a6 2766      			clr alarm_h					; clears alarm_h register
0000a7 9508      		ret
                 
                 		endIncHoural:
0000a8 9562      			swap alarm_h				; swap alarm_h back
0000a9 9508      		ret
                 incTimeClockHour:
0000aa d03c      	rcall increment_hour				; calls increment_hour
0000ab c021      	rjmp end							; jumps to the 'end' label
                 
                 incTimeClockMinute:
0000ac d02d      	rcall incMinute						; calls incMinute
0000ad c01f      	rjmp end							; jumps to the 'end' label
                 
                 incTimeClockSecond:
0000ae d01f      	rcall increment_second				; calls increment_send
0000af c01d      	rjmp end							; jumps to the 'end' label
                 
                 incTimeAlarmHour:
0000b0 dfe8      	rcall increment_alarm_hour			; calls increment_alarm_hour
0000b1 c01b      	rjmp end							; jumps to the 'end' label
                 
                 incTimeAlarmMinute:
0000b2 dfd7      	rcall increment_alarm_minute		; calls increment_alarm_minute
0000b3 c019      	rjmp end							; jumps to the 'end' label
                 
                 incTimeAlarmSecond:
0000b4 dfc9      	rcall increment_alarm_second		; calls increment_alarm_second
0000b5 c017      	rjmp end							; jumps to the 'end' label
                 
                 checkAlarm:
0000b6 ff81      	sbrs settings, (1<<alarmSign)				; if not equal, then jump to noAlarm
0000b7 c006      	rjmp noAlarm
0000b8 1763      	cp alarm_h, timerH							; compare alarm_h with timerH
0000b9 f421      	brne noAlarm								; if not equal, then jump to noAlarm
0000ba 1752      	cp alarm_m, timerM							; compare alarm_m with timerM
0000bb f411      	brne noAlarm								; if not equal then jump to noAlarm
                 
                 	yesAlarm:
                 		;ldi temp, 0b00000101					; sets alarm to go woop woop woop woop
                 		; settings, temp						; adds temp register with settings register and puts the value of those two in settings
                 		
0000bc 6088      		sbr settings, (1<<alarmBit)
                 		
                 		
0000bd 9508      		ret				
                 	noAlarm:
0000be 9508      ret
                 incrementTime:
0000bf 3090      	cpi mode, 0									; compares mode with 0
0000c0 f061      	breq end									; this is equal then jump to 'end' label
                 
0000c1 3091      	cpi mode, 1									; compares mode with 1
0000c2 f339      	breq incTimeClockHour						; this is equal then branches to incTimerClockHour
                 
0000c3 3092      	cpi mode, 2									; compares mode with 2
0000c4 f339      	breq incTimeClockMinute						; this is equal then branches to incTimerClockMinute
                 
0000c5 3093      	cpi mode, 3									; compares mode with 3				
0000c6 f339      	breq incTimeClockSecond						; this is equal then branches to incTimerClockSecond
                 
0000c7 3094      	cpi mode, 4									; compares mode with 4
0000c8 f339      	breq incTimeAlarmHour						; this is equal then branches to incTimeAlarmHour
                 
0000c9 3095      	cpi mode, 5									; compares mode with 5
0000ca f339      	breq incTimeAlarmMinute						; this is equal then branches to incTimerAlarmMinute
                 
0000cb 3096      	cpi mode, 6									; compares mode with 6
0000cc f339      	breq incTimeAlarmSecond						; this is equal then branches to incTimerAlarmSecond
                 	;breq alarmStatus							; if this is equal then branches to alarmStatus
                 
                 	end:									
0000cd cf93      	rjmp endUpdate								; jumps to endUpdate
                 
                 
                 increment_second:
                 						
0000ce 9513      	inc timerS									; increment timerS
0000cf 351a      	cpi timerS, 0x5A							; Compare timerS to 60
0000d0 f049      	breq incMinute								; If true, jump incMinute
0000d1 9512      	swap timerS									; swaps timerS register
0000d2 3a10      	cpi timerS, 0xA0							; compares timerS to 10
0000d3 f020      	brlo endIncSec								; branches if lower then 10 to endIncSec
                 
                 		incSecTen:			
0000d4 701f      			andi timerS, 0x0F					; does a logical AND with immediate on timerS
0000d5 9513      			inc timerS							; increments timerS
0000d6 9512      			swap timerS							; swaps timerS register back
0000d7 9508      		ret
                 
                 	endIncSec:
0000d8 9512      	swap timerS									; swap back
0000d9 9508      ret
                 
                 incMinute:		
0000da 2711      	clr timerS									; clear timerS register
0000db 9523      	inc timerM									; increments the timerM register
0000dc 352a      	cpi timerM, 0x5A							; compare the timerM register with 60
0000dd f049      	breq increment_hour							; branches if timerM is equal to 60
0000de 9522      	swap timerM									; swap timerM
                 						
0000df 3a20      	cpi timerM, 0xA0							; compares timerM with A0
0000e0 f020      	brlo endIncMin								; if it's lower then branch to endIncMin
                 		
                 		incMinTen:
0000e1 702f      			andi timerM, 0x0F					; does a logical AND with immediate on timerM
0000e2 9523      			inc timerM							; increments timerM
0000e3 9522      			swap timerM							; swaps timerM back
0000e4 9508      		ret 
                 
                 		endIncMin:
0000e5 9522      		swap timerM								; swaps timerM back
0000e6 9508      ret
                 
                 increment_hour:	
0000e7 2722      	clr timerM									; clear the timerM register
                 						
0000e8 9533      	inc timerH									; increment timerH
0000e9 3234      	cpi timerH, 0x24							; comapre timerH with 24
0000ea f039      	breq reset_clock							; if this is equal to 24 then branch to reset_clock
0000eb 9532      	swap timerH									; swaps timerH
                 										
0000ec 3a30      	cpi timerH, 0xA0							; compares with timerH with 0xA0 (inverted 10)
0000ed f040      	brlo endIncHour
                 		
                 		incHourTen:
0000ee 703f      			andi timerH, 0x0F					; does an logical AND with immediate on timerH
0000ef 9533      			inc timerH							; increments timerH
0000f0 9532      			swap timerH							; swaps timerH
0000f1 9508      		ret
                 		reset_clock:
0000f2 2711      			clr timerS							; clears timerS register
0000f3 2722      			clr timerM							; clears timerM register
0000f4 2733      			clr timerH							; clears timerH
0000f5 9508      		ret
                 		endIncHour:
0000f6 9532      		swap timerH								; swaps back the timerH register
0000f7 9508      ret
                 
                 sendTime:
0000f8 3094      	cpi mode, 4									; compares with the mode register with 4
0000f9 f4f4      	brge sendAlarm								; if this is equal to 4 then branch to sendAlarm
                 
0000fa 2f03      	mov temp, timerH							; copies the value of timerH to temp
0000fb 9502      	swap temp									; swap temp
0000fc 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
0000fd d03c      	rcall convertToSeg							; calls converToSeg
0000fe d037      	rcall sendRS232								; Now lets send this ;)
                 
0000ff 2f03      	mov temp, timerH							; copies the value of timerH again to temp
000100 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
000101 d038      	rcall convertToSeg							; calls converToSeg
000102 d033      	rcall sendRS232								; Now lets send this ;)
                 
000103 2f02      	mov temp, timerM							; copies the value of timerM to temp
000104 9502      	swap temp									; swap temp
000105 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
000106 d033      	rcall convertToSeg							; calls converToSeg
000107 d02e      	rcall sendRS232								; Now lets send this ;)
                 
000108 2f02      	mov temp, timerM							; copies the value of timerMS again to temp
000109 700f      	andi temp, 0xF								; do a logical AND with immediate on temp
00010a d02f      	rcall convertToSeg							; calls converToSeg	
00010b d02a      	rcall sendRS232								; Now lets send this ;)
                 
00010c 2f01      	mov temp, timerS							; copies the value of timerS to temp
00010d 9502      	swap temp									; swap temp
00010e 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
00010f d02a      	rcall convertToSeg							; calls converToSeg
000110 d025      	rcall sendRS232								; Now lets send this ;)
                 	
000111 2f01      	mov temp, timerS							; copies the value of timerS again to temp
000112 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
000113 d026      	rcall convertToSeg							; calls converToSeg
000114 d021      	rcall sendRS232								; Now lets send this ;)
                 
000115 2f08      	mov temp, settings							; Copies the value of settings to temp SIDE NOTE : dubbelpunt aan
000116 d01f      	rcall sendRS232								; Now lets send this ;)
                 
                 	endSendTime:
000117 9508      ret
                 
                 sendAlarm:
                 	
000118 2f06      	mov temp, alarm_h							; copies the value of alarm_h to temp
000119 9502      	swap temp									; swap temp
00011a 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
00011b d01e      	rcall convertToSeg							; calls converToSeg
00011c d019      	rcall sendRS232								; Now lets send this ;)
                 
00011d 2f06      	mov temp, alarm_h							; copies the value of alarm_h again to temp
00011e 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
00011f d01a      	rcall convertToSeg							; calls converToSeg
000120 d015      	rcall sendRS232								; Now lets send this ;)
                 
000121 2f05      	mov temp, alarm_m							; copies the value of alarm_m to temp
000122 9502      	swap temp									; swap temp
000123 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
000124 d015      	rcall convertToSeg							; calls converToSeg
000125 d010      	rcall sendRS232								; Now lets send this ;)
                 											
000126 2f05      	mov temp, alarm_m							; copies the value of alarm_m again to temp
000127 700f      	andi temp, 0xF								; do a logical AND with immediate on temp
000128 d011      	rcall convertToSeg							; calls converToSeg	
000129 d00c      	rcall sendRS232								; Now lets send this ;)
                 																							
00012a 2f04      	mov temp, alarm_s							; copies the value of alarm_s to temp
00012b 9502      	swap temp									; swap temp
00012c 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
00012d d00c      	rcall convertToSeg							; calls converToSeg
00012e d007      	rcall sendRS232								; Now lets send this ;)
                 												
00012f 2f04      	mov temp, alarm_s							; copies the value of alarm_s again to temp
000130 700f      	andi temp, 0x0F								; do a logical AND with immediate on temp
000131 d008      	rcall convertToSeg							; calls converToSeg
000132 d003      	rcall sendRS232								; Now lets send this ;)
                 												
000133 2f08      	mov temp, settings							; Copies the value of settings to temp SIDE NOTE : dubbelpunt aan
000134 d001      	rcall sendRS232								; Now lets send this ;)
                 								
000135 cfe1      	rjmp endSendTime							; jumps to endSendTime (in the sendTime function)
                 
                 sendRS232:														
000136 9b5d      	sbis UCSRA, UDRE							; skips if both bits are set (aka RS232 buffer isnt ready yet)
000137 cffe      	rjmp sendRS232								; if that is the case then jump back to the begin of this function
000138 b90c      	out UDR, temp								; if not then put the value of temp into the UDR register
000139 9508      ret
                 
                 
                 convertToSeg:
00013a 3000      	cpi temp, 0
00013b f099      	breq set_0
                 
00013c 3001      	cpi temp, 1
00013d f099      	breq set_1
                 
00013e 3002      	cpi temp, 2
00013f f099      	breq set_2
                 
000140 3003      	cpi temp, 3
000141 f099      	breq set_3
                 
000142 3004      	cpi temp, 4
000143 f099      	breq set_4
                 
000144 3005      	cpi temp, 5
000145 f099      	breq set_5
                 
000146 3006      	cpi temp, 6
000147 f099      	breq set_6
                 
000148 3007      	cpi temp, 7
000149 f099      	breq set_7
                 
00014a 3008      	cpi temp, 8
00014b f099      	breq set_8
                 
00014c 3009      	cpi temp, 9
00014d f099      	breq set_9
00014e 9508      ret
                 
                 set_0:
00014f e707      	ldi temp, 0x77
000150 9508      ret
                 
                 set_1:
000151 e204      	ldi temp, 0x24
000152 9508      ret
                 
                 set_2:
000153 e50d      	ldi temp, 0x5D
000154 9508      ret
                 
                 set_3:
000155 e60d      	ldi temp, 0x6D
000156 9508      ret
                 
                 set_4:
000157 e20e      	ldi temp, 0x2E
000158 9508      ret
                 
                 set_5:
000159 e60b      	ldi temp, 0x6B
00015a 9508      ret
                 
                 set_6:
00015b e70b      	ldi temp, 0x7B
00015c 9508      ret
                 
                 set_7:
00015d e205      	ldi temp, 0x25
00015e 9508      ret
                 
                 set_8:
00015f e70f      	ldi temp, 0x7F
000160 9508      ret
                 
                 set_9:
000161 e60f      	ldi temp, 0x6F


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega32" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  87 r17:  14 r18:  14 r19:  13 r20:  12 r21:  14 r22:  13 r23:   2 
r24:  10 r25:  21 r26:   0 r27:   8 r28:   4 r29:   0 r30:   0 r31:   0 
x  :   0 y  :   0 z  :   0 
Registers used: 12 out of 35 (34.3%)

"ATmega32" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :  18 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  35 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 brlt  :   0 brmi  :   0 
brne  :   3 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  13 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   2 cpc   :   0 
cpi   :  43 cpse  :   1 dec   :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :  14 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  38 lds   :   0 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  14 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  17 pop   :   0 
push  :   0 rcall :  45 ret   :  34 reti  :   1 rjmp  :  20 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   2 sbrc  :   1 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :  24 tst   :   0 wdr   :   0 
Instructions used: 26 out of 113 (23.0%)

"ATmega32" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002c6    684      0    684   32768   2.1%
[.dseg] 0x000060 0x000060      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
